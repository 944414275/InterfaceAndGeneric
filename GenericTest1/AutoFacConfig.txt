ContainerBuilder builder = new Autofac.ContainerBuilder();
 
        //获取WebApp这个项目的Assembly程序集
        Assembly controllerAss = Assembly.Load("WebApp");
        //注册这个程序集中所有的IController接口的实现类（实现了IController接口的类即是控制器，所以这里是注册这个程序集中所有的控制器）
        builder.RegisterControllers(controllerAss);
 
        //当然，我们也可以这样写： 即注册当前项目中的所有控制器
        //builder.RegisterControllers(typeof(MvcApplication).Assembly).PropertiesAutowired();
 
        //注册NationalityDal类 （不需要以接口的形式保存，因为有的类是没有接口的，比如过滤器类，这里我们只需要将这个类进行注册即可（用IOC容器管理起来））
        builder.RegisterType<NationalityDal>()
        //或者
        builder.RegisterType(typeof(NationalityDal))
 
 
 
        //注册NationalityDal类，并将它转换成INationalityDal接口类型（即以NationalityDal类型的对象以INationalityDal接口的形式保存）
        builder.RegisterType<NationalityDal>().As<INationalityDal>();
        builder.RegisterType<PersonDal>().As<IPersonDal>();
 
 
        //以上两条语句是针对这个PersonDal这个类仅仅只实现了一个IPersonDal接口，和NationalityDal类接口仅仅实现了一个INationalityDal接口的写法
 
        //那假如PersonDal类实现了多个接口，那我们就可以这样写（假如这个PersonDal实现了5个接口，当我们需要这个5个接口的实现类的时候，都可以返回这PersonDal类的实例对象）
        builder.RegisterType<PersonDal>().AsImplementedInterfaces();
 
        //第四步：创建一个真正的AutoFac的工作容器  
        IContainer container = builder.Build();
        DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
 
        //----------------完
 
 
        //有时候我们需要在控制器中使用这个container容器来拿某个接口的实现类对象那我们怎么做呢？有两种方式：
        //第一种：
        //我们可以将这个container工作容器类存到缓存中，然后再控制器中通过调用获取缓存的方式拿到这个工作容器类
        //拿到这个工作容器类后，可以做一下操作，获取这个接口的实现类对象
 
        CacheHelper.SetCache("aotufac", container);
 
        //第二种：
        //我们可以在控制器，或者其他地方这样写，这样就拿到了INationalityDal接口的实现类对象了
        var natDal = DependencyResolver.Current.GetService<INationalityDal>();
        //如果一个类没有接口，（只是对它进行了注册，并没有以接口的形式保存）GetService泛型参数就直接写类名即可（不一定非得是接口）
        var natDai = DependencyResolver.Current.GetService<NationalityDal>();

————————————————
版权声明：本文为CSDN博主「无盐海」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/Fanbin168/article/details/79674326